<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://ferrarimarco.info/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ferrarimarco.info/" rel="alternate" type="text/html" /><updated>2019-01-12T17:04:15+00:00</updated><id>https://ferrarimarco.info/feed.xml</id><title type="html">Marco Ferrari - Cloud Solutions Architect - Google</title><subtitle>Personal website of Marco Ferrari</subtitle><author><name>Marco Ferrari</name><email>ferrari.marco@gmail.com</email><uri>https://ferrarimarco.info</uri></author><entry><title type="html">Bootstrapping a Cluster on Google Cloud with Terraform</title><link href="https://ferrarimarco.info/blog/cloud/2018/05/09/google-cloud-engine-free-terraform/" rel="alternate" type="text/html" title="Bootstrapping a Cluster on Google Cloud with Terraform" /><published>2018-05-09T00:00:00+00:00</published><updated>2018-05-09T00:00:00+00:00</updated><id>https://ferrarimarco.info/blog/cloud/2018/05/09/google-cloud-engine-free-terraform</id><content type="html" xml:base="https://ferrarimarco.info/blog/cloud/2018/05/09/google-cloud-engine-free-terraform/">&lt;p&gt;Recently I had to evaluate cloud computing offers for a new project.
I started with &lt;a href=&quot;https://cloud.google.com/&quot;&gt;Google Cloud Platform&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;google-cloud-free-tier&quot;&gt;Google Cloud: Free Tier&lt;/h1&gt;

&lt;p&gt;For my evaluation goals the &lt;a href=&quot;https://cloud.google.com/free&quot;&gt;always-free tier&lt;/a&gt;
was enough.&lt;/p&gt;

&lt;p&gt;This free tier has many perks (at IaaS and PaaS), but for this exercise we will use:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1x free &lt;a href=&quot;https://cloud.google.com/compute/docs/machine-types#sharedcore&quot;&gt;f1-micro&lt;/a&gt; VM on &lt;a href=&quot;https://cloud.google.com/compute/?hl=it&quot;&gt;Compute Engine&lt;/a&gt; with 30GB of disk space&lt;/li&gt;
  &lt;li&gt;5GB of Google Cloud Storage&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;goals&quot;&gt;Goals&lt;/h1&gt;

&lt;p&gt;We are going to bootstrap a 1-VM cluster on Google Cloud Compute Engine using &lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform&lt;/a&gt;.
The VM will have a 30GB hard disk.&lt;/p&gt;

&lt;h2 id=&quot;terraform&quot;&gt;Terraform&lt;/h2&gt;

&lt;p&gt;Terraform is tool to automate the provision of cloud infrastructures.
Basically it translate a descriptor (&lt;a href=&quot;https://www.terraform.io/docs/configuration/&quot;&gt;Configurations&lt;/a&gt; in Terraform jargon) in calls to the chosen cloud provider API.
The fancy name for this management process is &lt;a href=&quot;https://en.wikipedia.org/wiki/Infrastructure_as_Code&quot;&gt;“Infrastructure as Code”&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;infrastructure-as-code&quot;&gt;Infrastructure as Code&lt;/h2&gt;

&lt;p&gt;Why should you describe your infrastructure with code?
For three reasons:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;It will be auditable: you know what’s in there&lt;/li&gt;
  &lt;li&gt;It can be versioned: you can control the changes&lt;/li&gt;
  &lt;li&gt;It can automatically processed: there are tools that can process your infrastructure descriptors and automatically apply changes&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;terraform-configurations&quot;&gt;Terraform Configurations&lt;/h1&gt;

&lt;p&gt;The whole project is available on GitHub: &lt;a href=&quot;https://github.com/ferrarimarco/google-cloud-playground&quot;&gt;ferrarimarco/google-cloud-playground&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Being this a really simple infrastructure, we used just three configurations&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Resources: &lt;a href=&quot;https://github.com/ferrarimarco/google-cloud-playground/blob/master/terraform/gce.tf&quot;&gt;gce.tf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Outputs: &lt;a href=&quot;https://github.com/ferrarimarco/google-cloud-playground/blob/master/terraform/outputs.tf&quot;&gt;outputs.tf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Variables: &lt;a href=&quot;https://github.com/ferrarimarco/google-cloud-playground/blob/master/terraform/variables.tf&quot;&gt;variables.tf&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;In this configuration we define the following resources:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;A &lt;a href=&quot;https://www.terraform.io/docs/backends/index.html&quot;&gt;backend&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Default provider credentials&lt;/li&gt;
  &lt;li&gt;A reginal Google Compute Engine IP Address&lt;/li&gt;
  &lt;li&gt;A Virtual Machine&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;backend&quot;&gt;Backend&lt;/h3&gt;

&lt;p&gt;A backend is needed to share the Terraform &lt;a href=&quot;https://www.terraform.io/docs/state/index.html&quot;&gt;state&lt;/a&gt;, if you want to collaborate with others on the management activities of the infrastructure. You could avoid setting up a backend (Terraform will use a local backend by default), but then you need to deal with the inevitable merging conflicts due to Terraform executions by different users. I configured it because with a remote backend I’m able to
modify my infrastructure from any workstation.&lt;/p&gt;

&lt;p&gt;To keep this in the same infrastructure, I manually created a Google Cloud Storage bucket and configured it in the resources configuration as:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;terraform {
  backend &quot;gcs&quot; {
    credentials = &quot;account.json&quot;
    prefix  = &quot;terraform/state&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;where &lt;code class=&quot;highlighter-rouge&quot;&gt;account.json&lt;/code&gt; is a credential file created as described in the &lt;a href=&quot;https://github.com/ferrarimarco/google-cloud-playground&quot;&gt;README&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;default-provider-configuration&quot;&gt;Default Provider Configuration&lt;/h3&gt;

&lt;p&gt;These are the default settings that we configured for the Google Cloud provider. Can be overridden by other resources.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;provider &quot;google&quot; {
  credentials = &quot;${file(&quot;account.json&quot;)}&quot;
  project     = &quot;${var.project_id}&quot;
  region = &quot;us-east1&quot;
  zone = &quot;us-east1-b&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note the use of variables (&lt;code class=&quot;highlighter-rouge&quot;&gt;${}&lt;/code&gt;). We’ll explain this later.&lt;/p&gt;

&lt;h3 id=&quot;google-compute-engine-ip-address-and-vm&quot;&gt;Google Compute Engine: IP Address and VM&lt;/h3&gt;

&lt;p&gt;Now let’s get to the meat: the Virtual Machine and its public IP address. The syntax is straightforward.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;resource &quot;google_compute_address&quot; &quot;regional-m1-ip&quot; {
  name = &quot;regional-m1-ip&quot;
}

resource &quot;google_compute_instance&quot; &quot;gce-free-tier&quot; {
  name = &quot;gce1&quot;
  machine_type = &quot;f1-micro&quot;
  tags = [&quot;free-tier&quot;]

  boot_disk {
    auto_delete = true
    initialize_params {
      image = &quot;ubuntu-os-cloud/ubuntu-1804-bionic-v20180426b&quot;
      size = 30
      type = &quot;pd-standard&quot;
    }
  }

  metadata {
    ssh-keys = &quot;${var.ssh_user}:${file(&quot;${var.public_key_path}&quot;)}&quot;
  }

  network_interface {
    access_config {
      nat_ip = &quot;${google_compute_address.regional-m1-ip.address}&quot;
    }
    subnetwork = &quot;default&quot;
  }

  service_account {
    scopes = [
      &quot;https://www.googleapis.com/auth/devstorage.read_only&quot;,
      &quot;https://www.googleapis.com/auth/logging.write&quot;,
      &quot;https://www.googleapis.com/auth/monitoring.write&quot;,
      &quot;https://www.googleapis.com/auth/servicecontrol&quot;,
      &quot;https://www.googleapis.com/auth/service.management.readonly&quot;,
      &quot;https://www.googleapis.com/auth/trace.append&quot;
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A couple of notes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Terraform does not yet support &lt;a href=&quot;https://cloud.google.com/compute/docs/instances/managing-instance-access&quot;&gt;OS-Login&lt;/a&gt;. We are stuck with &lt;a href=&quot;https://cloud.google.com/compute/docs/instances/adding-removing-ssh-keys&quot;&gt;Metadata-based&lt;/a&gt; logins (hence the setup of metadata) in the configuration&lt;/li&gt;
  &lt;li&gt;Region and image id should be parametrized with variables as well&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outputs&quot;&gt;Outputs&lt;/h2&gt;

&lt;p&gt;With Terraform we can define the outputs of each &lt;code class=&quot;highlighter-rouge&quot;&gt;terraform apply&lt;/code&gt; run. In this case it’s useful to get, for each VM, its id public IP address so we can connect to continue with the configuration.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;output &quot;instances&quot; {
  value = &quot;${join(&quot;,&quot;, google_compute_instance.gce-free-tier.*.instance_id, google_compute_instance.gce-free-tier.*.network_interface.0.address, google_compute_instance.gce-free-tier.*.network_interface.0.access_config.0.assigned_nat_ip)}&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;variables&quot;&gt;Variables&lt;/h2&gt;

&lt;p&gt;To avoid hard coding values in the configuration, I used a separate file to define runtime variables that can be overridden if necessary:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;variable &quot;public_key_path&quot; {
  description = &quot;Path to file containing public key&quot;
  default     = &quot;~/.ssh/id_rsa_gcloud.pub&quot;
}

variable &quot;private_key_path&quot; {
  description = &quot;Path to file containing private key&quot;
  default     = &quot;~/.ssh/id_rsa_gcloud&quot;
}

variable &quot;project_id&quot; {
  description = &quot;Google Cloud Project ID&quot;
}

variable &quot;ssh_user&quot; {
  description = &quot;SSH User&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;I showed you how to automatically setup a completely free (but somewhat limited) 1-VM cluster in Google Cloud and Terraform.&lt;/p&gt;

&lt;p&gt;Keep up with the updates in the &lt;a href=&quot;https://github.com/ferrarimarco/google-cloud-playground&quot;&gt;GitHub repository&lt;/a&gt;: I’m going to expand the cluster with more Google Cloud free tier perks.&lt;/p&gt;</content><author><name>Marco Ferrari</name><email>ferrari.marco@gmail.com</email><uri>https://ferrarimarco.info</uri></author><category term="google-cloud" /><category term="terraform" /><summary type="html">Recently I had to evaluate cloud computing offers for a new project. I started with Google Cloud Platform. Google Cloud: Free Tier For my evaluation goals the always-free tier was enough. This free tier has many perks (at IaaS and PaaS), but for this exercise we will use: 1x free f1-micro VM on Compute Engine with 30GB of disk space 5GB of Google Cloud Storage Goals We are going to bootstrap a 1-VM cluster on Google Cloud Compute Engine using Terraform. The VM will have a 30GB hard disk. Terraform Terraform is tool to automate the provision of cloud infrastructures. Basically it translate a descriptor (Configurations in Terraform jargon) in calls to the chosen cloud provider API. The fancy name for this management process is “Infrastructure as Code”. Infrastructure as Code Why should you describe your infrastructure with code? For three reasons: It will be auditable: you know what’s in there It can be versioned: you can control the changes It can automatically processed: there are tools that can process your infrastructure descriptors and automatically apply changes Terraform Configurations The whole project is available on GitHub: ferrarimarco/google-cloud-playground Being this a really simple infrastructure, we used just three configurations Resources: gce.tf Outputs: outputs.tf Variables: variables.tf Resources In this configuration we define the following resources: A backend Default provider credentials A reginal Google Compute Engine IP Address A Virtual Machine Backend A backend is needed to share the Terraform state, if you want to collaborate with others on the management activities of the infrastructure. You could avoid setting up a backend (Terraform will use a local backend by default), but then you need to deal with the inevitable merging conflicts due to Terraform executions by different users. I configured it because with a remote backend I’m able to modify my infrastructure from any workstation. To keep this in the same infrastructure, I manually created a Google Cloud Storage bucket and configured it in the resources configuration as: terraform { backend &quot;gcs&quot; { credentials = &quot;account.json&quot; prefix = &quot;terraform/state&quot; } } where account.json is a credential file created as described in the README. Default Provider Configuration These are the default settings that we configured for the Google Cloud provider. Can be overridden by other resources. provider &quot;google&quot; { credentials = &quot;${file(&quot;account.json&quot;)}&quot; project = &quot;${var.project_id}&quot; region = &quot;us-east1&quot; zone = &quot;us-east1-b&quot; } Note the use of variables (${}). We’ll explain this later. Google Compute Engine: IP Address and VM Now let’s get to the meat: the Virtual Machine and its public IP address. The syntax is straightforward. resource &quot;google_compute_address&quot; &quot;regional-m1-ip&quot; { name = &quot;regional-m1-ip&quot; } resource &quot;google_compute_instance&quot; &quot;gce-free-tier&quot; { name = &quot;gce1&quot; machine_type = &quot;f1-micro&quot; tags = [&quot;free-tier&quot;] boot_disk { auto_delete = true initialize_params { image = &quot;ubuntu-os-cloud/ubuntu-1804-bionic-v20180426b&quot; size = 30 type = &quot;pd-standard&quot; } } metadata { ssh-keys = &quot;${var.ssh_user}:${file(&quot;${var.public_key_path}&quot;)}&quot; } network_interface { access_config { nat_ip = &quot;${google_compute_address.regional-m1-ip.address}&quot; } subnetwork = &quot;default&quot; } service_account { scopes = [ &quot;https://www.googleapis.com/auth/devstorage.read_only&quot;, &quot;https://www.googleapis.com/auth/logging.write&quot;, &quot;https://www.googleapis.com/auth/monitoring.write&quot;, &quot;https://www.googleapis.com/auth/servicecontrol&quot;, &quot;https://www.googleapis.com/auth/service.management.readonly&quot;, &quot;https://www.googleapis.com/auth/trace.append&quot; ] } } A couple of notes: Terraform does not yet support OS-Login. We are stuck with Metadata-based logins (hence the setup of metadata) in the configuration Region and image id should be parametrized with variables as well Outputs With Terraform we can define the outputs of each terraform apply run. In this case it’s useful to get, for each VM, its id public IP address so we can connect to continue with the configuration. output &quot;instances&quot; { value = &quot;${join(&quot;,&quot;, google_compute_instance.gce-free-tier.*.instance_id, google_compute_instance.gce-free-tier.*.network_interface.0.address, google_compute_instance.gce-free-tier.*.network_interface.0.access_config.0.assigned_nat_ip)}&quot; } Variables To avoid hard coding values in the configuration, I used a separate file to define runtime variables that can be overridden if necessary: variable &quot;public_key_path&quot; { description = &quot;Path to file containing public key&quot; default = &quot;~/.ssh/id_rsa_gcloud.pub&quot; } variable &quot;private_key_path&quot; { description = &quot;Path to file containing private key&quot; default = &quot;~/.ssh/id_rsa_gcloud&quot; } variable &quot;project_id&quot; { description = &quot;Google Cloud Project ID&quot; } variable &quot;ssh_user&quot; { description = &quot;SSH User&quot; } Conclusions I showed you how to automatically setup a completely free (but somewhat limited) 1-VM cluster in Google Cloud and Terraform. Keep up with the updates in the GitHub repository: I’m going to expand the cluster with more Google Cloud free tier perks.</summary></entry><entry><title type="html">Unlocking an Android Smartphone with a Known Pattern Lock via ADB</title><link href="https://ferrarimarco.info/blog/mobile/security/2017/10/18/unlocking-android-pattern/" rel="alternate" type="text/html" title="Unlocking an Android Smartphone with a Known Pattern Lock via ADB" /><published>2017-10-18T00:00:00+00:00</published><updated>2017-10-18T00:00:00+00:00</updated><id>https://ferrarimarco.info/blog/mobile/security/2017/10/18/unlocking-android-pattern</id><content type="html" xml:base="https://ferrarimarco.info/blog/mobile/security/2017/10/18/unlocking-android-pattern/">&lt;p&gt;Recently my &lt;a href=&quot;https://en.wikipedia.org/wiki/Nexus_4&quot;&gt;Nexus 4&lt;/a&gt; touchscreen stopped
working.&lt;/p&gt;

&lt;p&gt;I wasn’t worried at all because I set up an automatic backup schedule with
&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.keramidas.TitaniumBackup&amp;amp;hl=it&quot;&gt;Titanium Backup&lt;/a&gt;
that runs every night and uploads backup data to Google Drive. So everything
under control right? Not so fast.&lt;/p&gt;

&lt;p&gt;I was able to restore everything on a spare Nexus 4 (that a friend lent me)
except of my
&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.unicredit&amp;amp;hl=it&quot;&gt;bank’s app&lt;/a&gt;.
More precisely: I was able to restore the app and related data but it was not
enough because this app also checks if the Android ID is what it’s expecting.
Being the two IDs different (I did not restore the Android ID with Titanium
Backup), the app (correctly) asked me to authenticate the new device. The only
problem is that for such authentication I needed a
&lt;a href=&quot;https://en.wikipedia.org/wiki/One-time_password&quot;&gt;One Time Password (OTP)&lt;/a&gt;
generated via the app itself. I was locked out because I could not generate new
codes with the app on my old Nexus 4 (touchscreen not working) and the geniuses
that designed the bank’s authentication system did not think about backup codes.&lt;/p&gt;

&lt;p&gt;So what to do? What are the alternatives?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;(Solution for a normal person) buy a 2$ USB OTG cable and connect a USB mouse
to the phone&lt;/li&gt;
  &lt;li&gt;(Solution for an Engineer) simulate touch input via
&lt;a href=&quot;https://developer.android.com/studio/command-line/adb.html&quot;&gt;Android Debug Bridge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Guess which path I chose…&lt;/p&gt;

&lt;h1 id=&quot;goal&quot;&gt;Goal&lt;/h1&gt;

&lt;p&gt;The goal of this exercise is to &lt;strong&gt;unlock an Android system protected with a known
pattern lock by simulating the touch input via ADB&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Note that the approach described below is applicable not only to
“pattern-locked” phones, but to all the cases when you cannot use the
touchscreen.&lt;/p&gt;

&lt;h1 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;An Android smartphone or tablet with either &lt;strong&gt;USB Debugging mode enabled
and an authorized ADB host to connect via ADB&lt;/strong&gt; or &lt;strong&gt;unlocked bootloader and
custom recovery (I tested the procedure with &lt;a href=&quot;https://twrp.me/&quot;&gt;TWRP&lt;/a&gt;)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;An ADB host (I used a Linux box)&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;connect-target-android-device-via-adb&quot;&gt;Connect Target Android Device via ADB&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Reboot your device in &lt;em&gt;recovery mode&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Start ADB on the host machine&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ferrarim@nuc-ferrarim:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;adb devices
 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; daemon not running. starting it now on port 5037 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; daemon started successfully &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Connect the target phone via USB&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Confirm that ADB correctly recognized the phone:&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ferrarim@nuc-ferrarim:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;adb devices
 List of devices attached
 0123456789abcdef	device
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;enable-usb-debugging&quot;&gt;Enable USB Debugging&lt;/h1&gt;

&lt;p&gt;You can skip this step if you already have USB Debugging enabled on the target
device. Remember that your phone must have a custom recovery installed (like
TWRP that defaults to &lt;em&gt;root&lt;/em&gt; access when connecting via ADB).&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Enable USB debugging via a root &lt;code class=&quot;highlighter-rouge&quot;&gt;adb shell&lt;/code&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ferrarim@nuc-ferrarim:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;adb shell
 mako:/ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;persist.service.adb.enable=1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;/system/build.prop
 mako:/ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;persist.service.debuggable=1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;/system/build.prop
 mako:/ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;persist.sys.usb.config=mass_storage,adb&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;/system/build.prop
 mako:/ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;authorize-the-adb-host&quot;&gt;Authorize the ADB Host&lt;/h1&gt;

&lt;p&gt;If your ADB host is already authorized (i. e. you are able to connect via ADB
when the target device is not running in recovery), you can skip this step.&lt;/p&gt;

&lt;p&gt;Let’s copy your ADB public key to the target device (this will overwrite the
all the keys you have authorized in the past, so you may want to backup your &lt;code class=&quot;highlighter-rouge&quot;&gt;/data/misc/adb/adb_keys&lt;/code&gt; file before manipulating it):&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ferrarim@nuc-ferrarim:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;adb push ~/.android/adbkey.pub /data/misc/adb/adb_keys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;reboot-the-target-device-in-normal-mode&quot;&gt;Reboot the Target Device in Normal Mode&lt;/h1&gt;

&lt;p&gt;If the target device is in recovery mode, let’s reboot it&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ferrarim@nuc-ferrarim:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;adb reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;fix-the-no-permission-error-when-connecting-via-adb&quot;&gt;Fix the “no permission” Error when Connecting via ADB&lt;/h1&gt;

&lt;p&gt;If you are not able to connect to the target device when it’s in normal mode and
you see the following output when running &lt;code class=&quot;highlighter-rouge&quot;&gt;adb devices&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ferrarim@nuc-ferrarim:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;adb devices
List of devices attached
 ????????????   no permissions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can try a couple of tricks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Reboot the ADB server:&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ferrarim@nuc-ferrarim:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;adb kill-server
ferrarim@nuc-ferrarim:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;adb start-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If the above does not solve the issue, try setting the following &lt;code class=&quot;highlighter-rouge&quot;&gt;udev&lt;/code&gt; rules in
&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/udev/rules.d/XX-android.rules&lt;/code&gt; where &lt;em&gt;XX&lt;/em&gt; is a your desired prefix to set
the order in which this rule file should be parsed considering other rule files.
If you don’t need to enforce a particular order, just choose a prefix such as
this rule file will end up at the end of the list of rule files
(i. e. &lt;code class=&quot;highlighter-rouge&quot;&gt;zz99-android.rules&lt;/code&gt;):&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usb&quot;&lt;/span&gt;, ATTRS&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;idVendor&lt;span class=&quot;o&quot;&gt;}==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0bb4&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0666&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usb&quot;&lt;/span&gt;, ATTRS&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;idVendor&lt;span class=&quot;o&quot;&gt;}==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0e79&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0666&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usb&quot;&lt;/span&gt;, ATTRS&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;idVendor&lt;span class=&quot;o&quot;&gt;}==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0502&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0666&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usb&quot;&lt;/span&gt;, ATTRS&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;idVendor&lt;span class=&quot;o&quot;&gt;}==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0b05&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0666&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usb&quot;&lt;/span&gt;, ATTRS&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;idVendor&lt;span class=&quot;o&quot;&gt;}==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;413c&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0666&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usb&quot;&lt;/span&gt;, ATTRS&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;idVendor&lt;span class=&quot;o&quot;&gt;}==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0489&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0666&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usb&quot;&lt;/span&gt;, ATTRS&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;idVendor&lt;span class=&quot;o&quot;&gt;}==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;091e&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0666&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usb&quot;&lt;/span&gt;, ATTRS&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;idVendor&lt;span class=&quot;o&quot;&gt;}==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;18d1&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0666&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usb&quot;&lt;/span&gt;, ATTRS&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;idVendor&lt;span class=&quot;o&quot;&gt;}==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0bb4&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0666&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usb&quot;&lt;/span&gt;, ATTRS&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;idVendor&lt;span class=&quot;o&quot;&gt;}==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;12d1&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0666&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usb&quot;&lt;/span&gt;, ATTRS&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;idVendor&lt;span class=&quot;o&quot;&gt;}==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;24e3&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0666&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usb&quot;&lt;/span&gt;, ATTRS&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;idVendor&lt;span class=&quot;o&quot;&gt;}==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2116&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0666&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usb&quot;&lt;/span&gt;, ATTRS&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;idVendor&lt;span class=&quot;o&quot;&gt;}==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0482&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0666&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usb&quot;&lt;/span&gt;, ATTRS&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;idVendor&lt;span class=&quot;o&quot;&gt;}==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;17ef&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0666&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usb&quot;&lt;/span&gt;, ATTRS&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;idVendor&lt;span class=&quot;o&quot;&gt;}==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1004&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0666&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usb&quot;&lt;/span&gt;, ATTRS&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;idVendor&lt;span class=&quot;o&quot;&gt;}==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;22b8&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0666&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usb&quot;&lt;/span&gt;, ATTRS&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;idVendor&lt;span class=&quot;o&quot;&gt;}==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0409&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0666&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usb&quot;&lt;/span&gt;, ATTRS&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;idVendor&lt;span class=&quot;o&quot;&gt;}==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2080&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0666&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usb&quot;&lt;/span&gt;, ATTRS&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;idVendor&lt;span class=&quot;o&quot;&gt;}==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0955&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0666&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usb&quot;&lt;/span&gt;, ATTRS&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;idVendor&lt;span class=&quot;o&quot;&gt;}==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2257&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0666&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usb&quot;&lt;/span&gt;, ATTRS&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;idVendor&lt;span class=&quot;o&quot;&gt;}==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10a9&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0666&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usb&quot;&lt;/span&gt;, ATTRS&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;idVendor&lt;span class=&quot;o&quot;&gt;}==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1d4d&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0666&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usb&quot;&lt;/span&gt;, ATTRS&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;idVendor&lt;span class=&quot;o&quot;&gt;}==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0471&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0666&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usb&quot;&lt;/span&gt;, ATTRS&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;idVendor&lt;span class=&quot;o&quot;&gt;}==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;04da&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0666&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usb&quot;&lt;/span&gt;, ATTRS&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;idVendor&lt;span class=&quot;o&quot;&gt;}==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;05c6&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0666&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usb&quot;&lt;/span&gt;, ATTRS&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;idVendor&lt;span class=&quot;o&quot;&gt;}==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1f53&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0666&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usb&quot;&lt;/span&gt;, ATTRS&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;idVendor&lt;span class=&quot;o&quot;&gt;}==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;04e8&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0666&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usb&quot;&lt;/span&gt;, ATTRS&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;idVendor&lt;span class=&quot;o&quot;&gt;}==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;04dd&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0666&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usb&quot;&lt;/span&gt;, ATTRS&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;idVendor&lt;span class=&quot;o&quot;&gt;}==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0fce&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0666&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usb&quot;&lt;/span&gt;, ATTRS&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;idVendor&lt;span class=&quot;o&quot;&gt;}==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0930&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0666&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usb&quot;&lt;/span&gt;, ATTRS&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;idVendor&lt;span class=&quot;o&quot;&gt;}==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;19d2&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0666&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usb&quot;&lt;/span&gt;, ATTRS&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;idVendor&lt;span class=&quot;o&quot;&gt;}==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1bbb&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;MODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0666&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Then setup file permissions, restart &lt;code class=&quot;highlighter-rouge&quot;&gt;udev&lt;/code&gt; and ADB server:&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ferrarim@nuc-ferrarim:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;644   /etc/udev/rules.d/zz99-android.rules
ferrarim@nuc-ferrarim:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chown &lt;/span&gt;root. /etc/udev/rules.d/zz99-android.rules
ferrarim@nuc-ferrarim:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;service udev restart
ferrarim@nuc-ferrarim:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;killall adb
ferrarim@nuc-ferrarim:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;adb start-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;You should now have a fully working ADB environment connected to the target
device (in normal mode).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;simulating-touch-input-via-adb&quot;&gt;Simulating Touch Input via ADB&lt;/h1&gt;

&lt;p&gt;We can simulate a user touching the screen and pressing buttons via ADB, but we
first have to know the coordinates of the points to touch. After that you need
to unlock the device, swipe up to reach the pattern lockscreen and then swipe
the pattern.&lt;/p&gt;

&lt;h2 id=&quot;get-the-coordinates-of-the-pattern-lock-points&quot;&gt;Get the Coordinates of the Pattern Lock Points&lt;/h2&gt;

&lt;p&gt;To get the X and Y coordinates of the points to touch you should:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Run an instance of the Android emulator and set it to the same resolution as
the target device or run a physical device that, again, has the same resolution
as the target device&lt;/li&gt;
  &lt;li&gt;Connect to such device via ADB&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Listen for touch events:&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ferrarim@nuc-ferrarim:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;adb shell getevent &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Touch each point of the pattern screen and write down its coordinates. Here
is the output of a touch event that you are listening for. &lt;code class=&quot;highlighter-rouge&quot;&gt;ABS_MT_POSITION_X&lt;/code&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;ABS_MT_POSITION_Y&lt;/code&gt; are the X and Y coordinates expressed in &lt;a href=&quot;https://en.wikipedia.org/wiki/Hexadecimal&quot;&gt;Hexadecimal
numeral system&lt;/a&gt;&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; /dev/input/event3: EV_KEY       BTN_TOUCH            DOWN
 /dev/input/event3: EV_ABS       ABS_MT_POSITION_X    000002f5
 /dev/input/event3: EV_ABS       ABS_MT_POSITION_Y    0000069e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Convert the nine (X,Y) tuples from Hexadecimal to Decimal&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now you have the X and Y for each one of the nine points of the pattern lock.&lt;/p&gt;

&lt;h2 id=&quot;run-the-pattern-script&quot;&gt;Run the Pattern Script&lt;/h2&gt;

&lt;p&gt;Before developing my own script I found an existing implementation on GitHub.
&lt;a href=&quot;https://github.com/ferrarimarco/android-pattern-unlock&quot;&gt;I forked that project&lt;/a&gt;
and adapted it to my own needs (I set the (X,Y) coordinates of each point of the
pattern lock and the pattern lock itself).&lt;/p&gt;

&lt;p&gt;The script does the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Turn the screen on by simulating a power button press:&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; adb shell input keyevent 26
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Swipe up to reach the pattern lock screen:&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; adb shell input swipe &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SWIPE_UP_X&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SWIPE_UP_Y_FROM&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SWIPE_UP_X&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SWIPE_UP_Y_TO&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Simulate the unlock pattern:&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c&quot;&gt;# Start touch event&lt;/span&gt;
 adb shell sendevent /dev/input/event2 3 57 14

 &lt;span class=&quot;c&quot;&gt;# Simulate input. $PATTERN is the unlock pattern of the target device&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;NUM &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PATTERN&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Sending &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NUM&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    adb shell sendevent /dev/input/event2 3 53 &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
    adb shell sendevent /dev/input/event2 3 54 &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
    adb shell sendevent /dev/input/event2 3 58 57
    adb shell sendevent /dev/input/event2 0 0 0
 &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

 &lt;span class=&quot;c&quot;&gt;# End touch event&lt;/span&gt;
 adb shell sendevent /dev/input/event2 3 57 4294967295
 adb shell sendevent /dev/input/event2 0 0 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;With the right tools it was possible to do the following with the target device,
with all the security patches applied and the latest version of Android (
LineageOS, 7.1.2):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Gain root access&lt;/li&gt;
  &lt;li&gt;Forcibly enable the USB Debug mode&lt;/li&gt;
  &lt;li&gt;Authorize an ADB host to connect to the device&lt;/li&gt;
  &lt;li&gt;Simulate touch input&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of this was possible for one single reason: &lt;strong&gt;I unlocked the bootloader of
my Android smartphone and installed a custom recovery that granted me (or anyone
with physical access to the device) ROOT privileges.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I would avoid doing it on devices that you intend to use to store sensitive
data. On such devices you should also enable full-disk encryption!&lt;/p&gt;</content><author><name>Marco Ferrari</name><email>ferrari.marco@gmail.com</email><uri>https://ferrarimarco.info</uri></author><category term="android" /><category term="pattern-lock" /><summary type="html">Recently my Nexus 4 touchscreen stopped working. I wasn’t worried at all because I set up an automatic backup schedule with Titanium Backup that runs every night and uploads backup data to Google Drive. So everything under control right? Not so fast. I was able to restore everything on a spare Nexus 4 (that a friend lent me) except of my bank’s app. More precisely: I was able to restore the app and related data but it was not enough because this app also checks if the Android ID is what it’s expecting. Being the two IDs different (I did not restore the Android ID with Titanium Backup), the app (correctly) asked me to authenticate the new device. The only problem is that for such authentication I needed a One Time Password (OTP) generated via the app itself. I was locked out because I could not generate new codes with the app on my old Nexus 4 (touchscreen not working) and the geniuses that designed the bank’s authentication system did not think about backup codes. So what to do? What are the alternatives? (Solution for a normal person) buy a 2$ USB OTG cable and connect a USB mouse to the phone (Solution for an Engineer) simulate touch input via Android Debug Bridge Guess which path I chose… Goal The goal of this exercise is to unlock an Android system protected with a known pattern lock by simulating the touch input via ADB. Note that the approach described below is applicable not only to “pattern-locked” phones, but to all the cases when you cannot use the touchscreen. Prerequisites An Android smartphone or tablet with either USB Debugging mode enabled and an authorized ADB host to connect via ADB or unlocked bootloader and custom recovery (I tested the procedure with TWRP) An ADB host (I used a Linux box) Connect Target Android Device via ADB Reboot your device in recovery mode Start ADB on the host machine ferrarim@nuc-ferrarim:~$ adb devices * daemon not running. starting it now on port 5037 * * daemon started successfully * Connect the target phone via USB Confirm that ADB correctly recognized the phone: ferrarim@nuc-ferrarim:~$ adb devices List of devices attached 0123456789abcdef device Enable USB Debugging You can skip this step if you already have USB Debugging enabled on the target device. Remember that your phone must have a custom recovery installed (like TWRP that defaults to root access when connecting via ADB). Enable USB debugging via a root adb shell: ferrarim@nuc-ferrarim:~$ adb shell mako:/ $ echo &quot;persist.service.adb.enable=1&quot; &amp;gt;&amp;gt;/system/build.prop mako:/ $ echo &quot;persist.service.debuggable=1&quot; &amp;gt;&amp;gt;/system/build.prop mako:/ $ echo &quot;persist.sys.usb.config=mass_storage,adb&quot; &amp;gt;&amp;gt;/system/build.prop mako:/ $ exit Authorize the ADB Host If your ADB host is already authorized (i. e. you are able to connect via ADB when the target device is not running in recovery), you can skip this step. Let’s copy your ADB public key to the target device (this will overwrite the all the keys you have authorized in the past, so you may want to backup your /data/misc/adb/adb_keys file before manipulating it): ferrarim@nuc-ferrarim:~$ adb push ~/.android/adbkey.pub /data/misc/adb/adb_keys Reboot the Target Device in Normal Mode If the target device is in recovery mode, let’s reboot it ferrarim@nuc-ferrarim:~$ adb reboot Fix the “no permission” Error when Connecting via ADB If you are not able to connect to the target device when it’s in normal mode and you see the following output when running adb devices: ferrarim@nuc-ferrarim:~$ adb devices List of devices attached ???????????? no permissions You can try a couple of tricks: Reboot the ADB server: ferrarim@nuc-ferrarim:~$ adb kill-server ferrarim@nuc-ferrarim:~$ adb start-server If the above does not solve the issue, try setting the following udev rules in /etc/udev/rules.d/XX-android.rules where XX is a your desired prefix to set the order in which this rule file should be parsed considering other rule files. If you don’t need to enforce a particular order, just choose a prefix such as this rule file will end up at the end of the list of rule files (i. e. zz99-android.rules): SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;0bb4&quot;, MODE=&quot;0666&quot; SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;0e79&quot;, MODE=&quot;0666&quot; SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;0502&quot;, MODE=&quot;0666&quot; SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;0b05&quot;, MODE=&quot;0666&quot; SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;413c&quot;, MODE=&quot;0666&quot; SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;0489&quot;, MODE=&quot;0666&quot; SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;091e&quot;, MODE=&quot;0666&quot; SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;18d1&quot;, MODE=&quot;0666&quot; SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;0bb4&quot;, MODE=&quot;0666&quot; SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;12d1&quot;, MODE=&quot;0666&quot; SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;24e3&quot;, MODE=&quot;0666&quot; SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;2116&quot;, MODE=&quot;0666&quot; SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;0482&quot;, MODE=&quot;0666&quot; SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;17ef&quot;, MODE=&quot;0666&quot; SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;1004&quot;, MODE=&quot;0666&quot; SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;22b8&quot;, MODE=&quot;0666&quot; SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;0409&quot;, MODE=&quot;0666&quot; SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;2080&quot;, MODE=&quot;0666&quot; SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;0955&quot;, MODE=&quot;0666&quot; SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;2257&quot;, MODE=&quot;0666&quot; SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;10a9&quot;, MODE=&quot;0666&quot; SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;1d4d&quot;, MODE=&quot;0666&quot; SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;0471&quot;, MODE=&quot;0666&quot; SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;04da&quot;, MODE=&quot;0666&quot; SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;05c6&quot;, MODE=&quot;0666&quot; SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;1f53&quot;, MODE=&quot;0666&quot; SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;04e8&quot;, MODE=&quot;0666&quot; SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;04dd&quot;, MODE=&quot;0666&quot; SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;0fce&quot;, MODE=&quot;0666&quot; SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;0930&quot;, MODE=&quot;0666&quot; SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;19d2&quot;, MODE=&quot;0666&quot; SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;1bbb&quot;, MODE=&quot;0666&quot; Then setup file permissions, restart udev and ADB server: ferrarim@nuc-ferrarim:~$ chmod 644 /etc/udev/rules.d/zz99-android.rules ferrarim@nuc-ferrarim:~$ chown root. /etc/udev/rules.d/zz99-android.rules ferrarim@nuc-ferrarim:~$ service udev restart ferrarim@nuc-ferrarim:~$ killall adb ferrarim@nuc-ferrarim:~$ adb start-server You should now have a fully working ADB environment connected to the target device (in normal mode). Simulating Touch Input via ADB We can simulate a user touching the screen and pressing buttons via ADB, but we first have to know the coordinates of the points to touch. After that you need to unlock the device, swipe up to reach the pattern lockscreen and then swipe the pattern. Get the Coordinates of the Pattern Lock Points To get the X and Y coordinates of the points to touch you should: Run an instance of the Android emulator and set it to the same resolution as the target device or run a physical device that, again, has the same resolution as the target device Connect to such device via ADB Listen for touch events: ferrarim@nuc-ferrarim:~$ adb shell getevent -l Touch each point of the pattern screen and write down its coordinates. Here is the output of a touch event that you are listening for. ABS_MT_POSITION_X and ABS_MT_POSITION_Y are the X and Y coordinates expressed in Hexadecimal numeral system /dev/input/event3: EV_KEY BTN_TOUCH DOWN /dev/input/event3: EV_ABS ABS_MT_POSITION_X 000002f5 /dev/input/event3: EV_ABS ABS_MT_POSITION_Y 0000069e Convert the nine (X,Y) tuples from Hexadecimal to Decimal Now you have the X and Y for each one of the nine points of the pattern lock. Run the Pattern Script Before developing my own script I found an existing implementation on GitHub. I forked that project and adapted it to my own needs (I set the (X,Y) coordinates of each point of the pattern lock and the pattern lock itself). The script does the following: Turn the screen on by simulating a power button press: adb shell input keyevent 26 Swipe up to reach the pattern lock screen: adb shell input swipe ${SWIPE_UP_X} ${SWIPE_UP_Y_FROM} ${SWIPE_UP_X} ${SWIPE_UP_Y_TO} Simulate the unlock pattern: # Start touch event adb shell sendevent /dev/input/event2 3 57 14 # Simulate input. $PATTERN is the unlock pattern of the target device for NUM in $PATTERN do echo &quot;Sending $NUM: ${X[$NUM]}, ${Y[$NUM]}&quot; adb shell sendevent /dev/input/event2 3 53 ${X[$NUM]} adb shell sendevent /dev/input/event2 3 54 ${Y[$NUM]} adb shell sendevent /dev/input/event2 3 58 57 adb shell sendevent /dev/input/event2 0 0 0 done # End touch event adb shell sendevent /dev/input/event2 3 57 4294967295 adb shell sendevent /dev/input/event2 0 0 0 Conclusions With the right tools it was possible to do the following with the target device, with all the security patches applied and the latest version of Android ( LineageOS, 7.1.2): Gain root access Forcibly enable the USB Debug mode Authorize an ADB host to connect to the device Simulate touch input All of this was possible for one single reason: I unlocked the bootloader of my Android smartphone and installed a custom recovery that granted me (or anyone with physical access to the device) ROOT privileges. I would avoid doing it on devices that you intend to use to store sensitive data. On such devices you should also enable full-disk encryption!</summary></entry><entry><title type="html">An Automatically Configured Development Box</title><link href="https://ferrarimarco.info/blog/development/devops/configuration/2017/07/26/open-development-environment-devbox/" rel="alternate" type="text/html" title="An Automatically Configured Development Box" /><published>2017-07-26T00:00:00+00:00</published><updated>2017-07-26T00:00:00+00:00</updated><id>https://ferrarimarco.info/blog/development/devops/configuration/2017/07/26/open-development-environment-devbox</id><content type="html" xml:base="https://ferrarimarco.info/blog/development/devops/configuration/2017/07/26/open-development-environment-devbox/">&lt;p&gt;In the past months I was assigned a new task at work, that essentially boiled
down to this question: &lt;em&gt;how can we simplify the deployment of new development
workstations?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In my development team at the time, we were tired of repeating the same (mostly
manual and not documented) steps. The configuration process resulted in
different development environment leading to confusion (it works on my machine!)
and deployment issues.&lt;/p&gt;

&lt;h2 id=&quot;baseline&quot;&gt;Baseline&lt;/h2&gt;

&lt;p&gt;We were in the situation where each developer, depending on his/her experience,
installed and configured a set of development tools at his/her own will.
This process was largely undocumented (READMEs were Holy Grails) and led to all
sort of environment disparity issues. Moreover the configuration could not be
easily changed because of the fear of breaking something. For the same reason
no one actually bothered to install upgrades for such tools (we had
someone who was stuck on a 3-years-ago Eclipse version!).&lt;/p&gt;

&lt;h2 id=&quot;list-of-requirements&quot;&gt;List of Requirements&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Automated Setup: there must be no manual steps involved in the setup of a
workstation&lt;/li&gt;
  &lt;li&gt;Versioning: the configuration should be stored in a Version Control System&lt;/li&gt;
  &lt;li&gt;Reproducibility: the setup process of a new workstation should be easily
reproducible&lt;/li&gt;
  &lt;li&gt;Environments should be ephemeral: each instance should be easily created and
destroyed without any loss of configuration&lt;/li&gt;
  &lt;li&gt;Minimize the time needed to spin up a new instance&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;research&quot;&gt;Research&lt;/h2&gt;

&lt;p&gt;After some research, I could not find a out-of-the-box solution or even a set of
established best practices to follow. Everyone was (is?) focusing on
&lt;em&gt;development environments&lt;/em&gt; and not on the configuration process of the
development tools.&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;This solution (&lt;a href=&quot;https://github.com/ferrarimarco/open-development-environment-devbox&quot;&gt;ferrarimarco/open-development-environment-devbox&lt;/a&gt;) is a
process that produces a packaged machine with the needed tools already installed
and ready to be used. For a list of the available tools refer to the README in
&lt;a href=&quot;https://github.com/ferrarimarco/open-development-environment-devbox&quot;&gt;ferrarimarco/open-development-environment-devbox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some of the included tools run inside &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; containers to ease and speed up the
setup and deployment.&lt;/p&gt;

&lt;h3 id=&quot;build&quot;&gt;Build&lt;/h3&gt;

&lt;p&gt;To automate the creation of images for various platforms I implemented a
&lt;a href=&quot;https://www.packer.io&quot;&gt;Packer&lt;/a&gt; template to execute the following tasks:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Provision a new machine&lt;/li&gt;
  &lt;li&gt;Start the new machine&lt;/li&gt;
  &lt;li&gt;Install the Operating System&lt;/li&gt;
  &lt;li&gt;Configure the running instance by running provisioning tools&lt;/li&gt;
  &lt;li&gt;Package the machine&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I chose Packer because it let me write a recipe (a single JSON file called
&lt;em&gt;template&lt;/em&gt;) to provision and configure the machine in a totally
automated way. I just run the &lt;code class=&quot;highlighter-rouge&quot;&gt;packer build&lt;/code&gt; command to start the build process.&lt;/p&gt;

&lt;p&gt;The other interesting Packer feature is that you can use multiple providers (
different hypervisors and/or cloud providers), multiple configuration methods (
shell scripts, &lt;a href=&quot;https://www.ansible.com/&quot;&gt;Ansible&lt;/a&gt; playbooks, Chef recipes, etc.) and different post
processors to package the created images. This gives you maximum deployment
flexibility (i.e. start with a local virtualized environment and move to a cloud
based one in the future).&lt;/p&gt;

&lt;p&gt;I chose to run the configuration process while building the image so I had to
execute this process only once per build and not every time an instance is
started.&lt;/p&gt;

&lt;h3 id=&quot;configuration&quot;&gt;Configuration&lt;/h3&gt;

&lt;p&gt;The configuration process was implemented by developing a set of &lt;a href=&quot;https://www.ansible.com/&quot;&gt;Ansible&lt;/a&gt; roles.
I decided to use a dedicated configuration tool (&lt;a href=&quot;https://www.ansible.com/&quot;&gt;Ansible&lt;/a&gt;) instead of writing
shell scripts to avoid the complexity of ensuring the compatibility of such
scripts across multiple platforms. I also benefited from the built-in node
management mechanisms that these dedicated tools implement out-of-the-box.&lt;/p&gt;

&lt;p&gt;The adoption of this kind of tools has the added plus of letting you reuse your
code on different platforms (Virtual Machines, Physical Machines) without much
effort. You just need to tell to such tools where your instances are and they
will do the rest.&lt;/p&gt;

&lt;h3 id=&quot;deployment&quot;&gt;Deployment&lt;/h3&gt;

&lt;p&gt;For now I deployed instances of this Development Box in two ways:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Virtual Machines managed with &lt;a href=&quot;https://www.vagrantup.com&quot;&gt;Vagrant&lt;/a&gt; to manage
the life cycle of each instance. You can bring up a new instance in matter of
seconds with just &lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant up&lt;/code&gt; command;&lt;/li&gt;
  &lt;li&gt;Physical machines, by applying the same set of &lt;a href=&quot;https://www.ansible.com/&quot;&gt;Ansible&lt;/a&gt; roles to a given
host. In this case &lt;a href=&quot;https://www.vagrantup.com&quot;&gt;Vagrant&lt;/a&gt; can be used as a development environment before
applying any role to the production node.&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Marco Ferrari</name><email>ferrari.marco@gmail.com</email><uri>https://ferrarimarco.info</uri></author><category term="ansible" /><category term="docker" /><category term="vagrant" /><summary type="html">In the past months I was assigned a new task at work, that essentially boiled down to this question: how can we simplify the deployment of new development workstations? In my development team at the time, we were tired of repeating the same (mostly manual and not documented) steps. The configuration process resulted in different development environment leading to confusion (it works on my machine!) and deployment issues. Baseline We were in the situation where each developer, depending on his/her experience, installed and configured a set of development tools at his/her own will. This process was largely undocumented (READMEs were Holy Grails) and led to all sort of environment disparity issues. Moreover the configuration could not be easily changed because of the fear of breaking something. For the same reason no one actually bothered to install upgrades for such tools (we had someone who was stuck on a 3-years-ago Eclipse version!). List of Requirements Automated Setup: there must be no manual steps involved in the setup of a workstation Versioning: the configuration should be stored in a Version Control System Reproducibility: the setup process of a new workstation should be easily reproducible Environments should be ephemeral: each instance should be easily created and destroyed without any loss of configuration Minimize the time needed to spin up a new instance Research After some research, I could not find a out-of-the-box solution or even a set of established best practices to follow. Everyone was (is?) focusing on development environments and not on the configuration process of the development tools. Solution This solution (ferrarimarco/open-development-environment-devbox) is a process that produces a packaged machine with the needed tools already installed and ready to be used. For a list of the available tools refer to the README in ferrarimarco/open-development-environment-devbox. Some of the included tools run inside Docker containers to ease and speed up the setup and deployment. Build To automate the creation of images for various platforms I implemented a Packer template to execute the following tasks: Provision a new machine Start the new machine Install the Operating System Configure the running instance by running provisioning tools Package the machine I chose Packer because it let me write a recipe (a single JSON file called template) to provision and configure the machine in a totally automated way. I just run the packer build command to start the build process. The other interesting Packer feature is that you can use multiple providers ( different hypervisors and/or cloud providers), multiple configuration methods ( shell scripts, Ansible playbooks, Chef recipes, etc.) and different post processors to package the created images. This gives you maximum deployment flexibility (i.e. start with a local virtualized environment and move to a cloud based one in the future). I chose to run the configuration process while building the image so I had to execute this process only once per build and not every time an instance is started. Configuration The configuration process was implemented by developing a set of Ansible roles. I decided to use a dedicated configuration tool (Ansible) instead of writing shell scripts to avoid the complexity of ensuring the compatibility of such scripts across multiple platforms. I also benefited from the built-in node management mechanisms that these dedicated tools implement out-of-the-box. The adoption of this kind of tools has the added plus of letting you reuse your code on different platforms (Virtual Machines, Physical Machines) without much effort. You just need to tell to such tools where your instances are and they will do the rest. Deployment For now I deployed instances of this Development Box in two ways: Virtual Machines managed with Vagrant to manage the life cycle of each instance. You can bring up a new instance in matter of seconds with just vagrant up command; Physical machines, by applying the same set of Ansible roles to a given host. In this case Vagrant can be used as a development environment before applying any role to the production node.</summary></entry></feed>